##The following tree represents the LTL formula:(G(_htransidle_ -> (_hburstsingle_ & _htransidle_ & !_hwrite_ & !_last_ & !_start_)) & G(!_hsel_ -> (_hburstsingle_ & _htransidle_ & !_hwrite_ & !_last_ & !_start_)) & G(_start_ -> _htransnonseq_) & G((_hready_ & _htransnonseq_ & !_last_) -> X_htransseq_) & G((_hburstincr4_ & _hlock_ & _hready_ & _htransnonseq_) -> X(_htransseq_ U (_hready_ & _htransseq_ & X(_htransseq_ U (_hready_ & _htransseq_ & X(_htransseq_ U _hready_)))))) & G((_last_ & X!_start_) -> X_htransidle_) & G(!_hready_ -> ((_htransnonseq_ <-> X_htransnonseq_) & (_htransseq_ <-> X_htransseq_) & (_htransidle_ <-> X_htransidle_) & (_hburstsingle_ <-> X_hburstsingle_) & (_hburstincr4_ <-> X_hburstincr4_) & (_hburstincr_ <-> X_hburstincr_) & (_haddri_ <-> X_haddri_) & (_hwdatai_ <-> X_hwdatai_) & (_doi_ <-> X_doi_)))) -> (G(!_hsel_ -> _hready_) & G(!_hsel_ -> _hrespokay_) & G(_htransidle_ -> _hrespokay_) & G(_hsel_ -> ((_wr_ -> !_rd_) & (_rd_ -> !_wr_))) & G((_hsel_ & (_htransnonseq_ | _htransseq_)) -> ((_hwrite_ -> _wr_) & (!_hwrite_ -> _rd_))) & G((_hsel_ & (_htransnonseq_ | _htransseq_)) -> (_addri_ <-> _haddri_)) & G((_hsel_ & _hwrite_ & (_htransnonseq_ | _htransseq_)) -> (_dii_ <-> _hwdatai_)) & G((_hsel_ & !_hwrite_ & (_htransnonseq_ | _htransseq_)) -> (_doi_ <-> _hrdatai_)) & G(((_full_ & _hsel_ & _wr_) -> _hresperror_) & ((_empty_ & _hsel_ & _rd_) -> _hresperror_)))


Text: Assumptions. The assumptions are as follows.
A1 SYMBOL0
A2 SYMBOL1
A3 SYMBOL2
A4 SYMBOL3
A5 SYMBOL4
A6 SYMBOL5
A7 SYMBOL6

Guarantees. The guarantees are as follows.
G1 SYMBOL7
G2 SYMBOL8
G3 SYMBOL9
G4 SYMBOL10
G5 SYMBOL11
G6 SYMBOL12
G7 SYMBOL13
G8 SYMBOL14
G9 SYMBOL15
Translation: ((_SYMBOL0_) && (_SYMBOL1_) && (_SYMBOL2_) && (_SYMBOL3_) && (_SYMBOL4_) && (_SYMBOL5_) && (_SYMBOL6_)) -> ((_SYMBOL7_) && (_SYMBOL8_) && (_SYMBOL9_) && (_SYMBOL10_) && (_SYMBOL11_) && (_SYMBOL12_) && (_SYMBOL13_) && (_SYMBOL14_) && (_SYMBOL15_))
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL0
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: the slave is not selected by the decoder
		 Symbol: SYMBOL0
		 Translation: !_hsel_
		 Text: all control signals shall be low
		 Symbol: SYMBOL1
		 Translation: _htransidle_ && (_hburstsingle_) && !_hwrite_ && !_start_ && !_last_
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL1
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: HTRANS is IDLE
		 Symbol: SYMBOL0
		 Translation: (_htransidle_)
		 Text: all control signals shall be low
		 Symbol: SYMBOL1
		 Translation: _htransidle_ && (_hburstsingle_) && !_hwrite_ && !_start_ && !_last_
	 Text: First transfer of any sequence is NONSEQ in nature.
	 Symbol: SYMBOL2
	 Translation: G (_start_ -> (_htransnonseq_))
	 Text: Non-first transfer of an AHB sequence will always be SEQ in nature.
	 Symbol: SYMBOL3
	 Translation: G (!_last_ && (_htransnonseq_) && _hready_ -> X (_htransseq_))
	 Text: Burst sequence of length four shall end at fourth occurrence of HREADY.
	 Symbol: SYMBOL4
	 Translation: G ((_hlock_ && (_hburstincr4_) && _hready_ && (_htransnonseq_)) -> X (_htransseq_ U (_htransseq_ && _hready_ && X(_htransseq_ U (_htransseq_ && _hready_ && X(_htransseq_ U _hready_))))))
	 Text: If SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL5
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: SYMBOL0 and SYMBOL1
		 Symbol: SYMBOL0
		 Translation: ((_SYMBOL0_) && (_SYMBOL1_))
			 Text: this is last transaction of a sequence
			 Symbol: SYMBOL0
			 Translation: _last_
			 Text: next cycle is not start of another sequence
			 Symbol: SYMBOL1
			 Translation: X !_start_
		 Text: HTRANS shall be IDLE in next cycle
		 Symbol: SYMBOL1
		 Translation: X (_htransidle_)
	 Text: If SYMBOL0, then SYMBOL1.
	 Symbol: SYMBOL6
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: HREADY is low
		 Symbol: SYMBOL0
		 Translation: !(_hready_)
		 Text: all control signals, address and data buses shall hold their values
		 Symbol: SYMBOL1
		 Translation: ((_htransnonseq_ <-> X_htransnonseq_) && (_htransseq_ <-> X_htransseq_) && (_htransidle_ <-> X_htransidle_) && (_hburstsingle_ <-> X_hburstsingle_) && (_hburstincr4_ <-> X_hburstincr4_) && (_hburstincr_ <-> X_hburstincr_) && ((_haddri_) <-> X (_haddri_)) && ((_hwdatai_) <-> X (_hwdatai_)) && ((_doi_) <-> X (_doi_)))
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL7
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: the slave is not selected by the decoder
		 Symbol: SYMBOL0
		 Translation: !_hsel_
		 Text: HREADY signal shall be high
		 Symbol: SYMBOL1
		 Translation: _hready_
	 Text: When SYMBOL0, SYMBOL1
	 Symbol: SYMBOL8
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: the slave is not selected by the decoder
		 Symbol: SYMBOL0
		 Translation: !_hsel_
		 Text: HRESP shall be OKAY.
		 Symbol: SYMBOL1
		 Translation: _hrespokay_
	 Text: When SYMBOL0, SYMBOL1
	 Symbol: SYMBOL9
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: no AHB transaction is taking place
		 Symbol: SYMBOL0
		 Translation: _htransidle_
		 Text: HRESP shall be OKAY.
		 Symbol: SYMBOL1
		 Translation: _hrespokay_
	 Text: RD and WR signal cannot be high simultaneously.
	 Symbol: SYMBOL10
	 Translation: G (_hsel_ -> ( (_wr_ -> !_rd_) && (_rd_ -> !_wr_)))
	 Text: If SYMBOL0, then SYMBOL1. Similarly, if the SYMBOL2, then SYMBOL1.
	 Symbol: SYMBOL11
	 Translation: G (((_SYMBOL0_) -> (_SYMBOL1_)) && ((_SYMBOL2_) -> (_SYMBOL1_)))
		 Text: SYMBOL0 and SYMBOL1
		 Symbol: SYMBOL0
		 Translation: ((_SYMBOL0_) && (_SYMBOL1_))
			 Text: memory is full
			 Symbol: SYMBOL0
			 Translation: (_full_)
			 Text: write transfer is attempted
			 Symbol: SYMBOL1
			 Translation: _hsel_ && _wr_
		 Text: the slave shall send an ERROR response
		 Symbol: SYMBOL1
		 Translation: _hresperror_
		 Text: SYMBOL0 and SYMBOL1
		 Symbol: SYMBOL2
		 Translation: ((_SYMBOL0_) && (_SYMBOL1_))
			 Text: memory is empty
			 Symbol: SYMBOL0
			 Translation: (_empty_)
			 Text: a read transfer is attempted
			 Symbol: SYMBOL1
			 Translation: _hsel_ && _rd_
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL12
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: slave is involved in a transfer
		 Symbol: SYMBOL0
		 Translation: _hsel_ && ((_htransnonseq_) || (_htransseq_))
		 Text: HWRITE is used to decide values of WR and RD
		 Symbol: SYMBOL1
		 Translation: (_hwrite_ -> _wr_) && (!_hwrite_ -> _rd_)
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL13
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: slave is involved in any transfer
		 Symbol: SYMBOL0
		 Translation: _hsel_ && ((_htransnonseq_) || (_htransseq_))
		 Text: signal HADDR is used to decide ADDR
		 Symbol: SYMBOL1
		 Translation: (_haddri_) <-> (_addri_)
	 Text: When SYMBOL0, SYMBOL1
	 Symbol: SYMBOL14
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: slave is involved in write transfer
		 Symbol: SYMBOL0
		 Translation: _hsel_ && ((_htransnonseq_) || (_htransseq_)) && _hwrite_
		 Text: signal HWDATA is used to decide DI.
		 Symbol: SYMBOL1
		 Translation: (_hwdatai_) <-> (_dii_)
	 Text: When SYMBOL0, SYMBOL1.
	 Symbol: SYMBOL15
	 Translation: G ((_SYMBOL0_) -> (_SYMBOL1_))
		 Text: slave is involved in read transfer
		 Symbol: SYMBOL0
		 Translation: _hsel_ && ((_htransnonseq_) || (_htransseq_)) && !_hwrite_
		 Text: signal DO is used to decide HRDATA
		 Symbol: SYMBOL1
		 Translation: (_doi_) <-> (_hrdatai_)